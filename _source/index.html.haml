- @layout = '_layouts/application'
- @head = capture_haml do
	%link{:rel=>'stylesheet', :href=>'style.css'}

%h1 snack

%ul
	%li Snack is a small (less than 125 lines) framework for building static websites.
	%li It compiles haml, sass, and coffee-script templates into html, css, and javascript.
	%li It also comes with a rack-based server for development.
		
%h2 Getting Started

%ol
	%li 
		Install snack at the command prompt if you haven't yet:
		%pre gem install snack

	%li 
		At the command prompt, create a new snack application:
		%pre mkdir myapp && cd myapp && snack new # 'myapp' is the application name

	%li 
		Start the web server:
		%pre snack serve

	%li
		Go to http://localhost:9393/ and you'll see:
		%pre "Hello from snack!"

	%li 
		When you're ready to export the site into html, use:
		%pre snack build
		You should see the compiled files in the current directory.

%h2 Views

%h3 Layouts
%p By default, snack does not render templates within layouts. If you would like your templates to render within a layout, just assign the layout's path to @layout. The path should be relative to the snack root. For example, in index.html.haml:
%pre @layout = 'path/to/layouts/application'

%h3 Partials
%p You can use partials to break complex views up into manageable chunks. To render a partial, use the partial function. It takes a path relative to the snack root. For example, in index.html.haml:
%pre = partial 'path/to/partials/my_partial', :album => 'Pinkerton', :band => 'Weezer'

As you can see, you may also pass optional local variables to render within the partial. Snack assumes that the filenames of your partials begin with an underscore.  For the example above, snack would actually look for a partial named '_my_partial.html.haml'.